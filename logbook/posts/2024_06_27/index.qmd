---
title: "Day 6"
author: "Amy Heather"
date: "2024-06-27"
categories: [reproduce]
bibliography: ../../../quarto_site/references.bib
---

::: {.callout-note}

TBC. Total time used: TBCh TBCm (TBC%)

:::

## Consensus

I emailed Figure 4 and in-text results 1 and 2 to Tom and Alison, who both confirmed that they agreed these to be successfully reproduced.

## 9.22-9.34: In-text result 2

On reflection, I realised that I had not looked at the result for staff nurse utilisation. Add this, and it was consistent with the text. Hence, successfully reproduced at 9.34.

```{python}
import sys
sys.path.append('../')
from timings import calculate_times

# Minutes used prior to today
used_to_date = 1262

# Times from today
times = [
    ('9.22', '9.34')
]

calculate_times(used_to_date, times)
```

## 9.37-10.32: In-text result 3

This result varies whether and for how long the doctor intervenes in delivery

* 50% delivery cases: no doctor
* 30% delivery cases: doctor but only one-third of typical intervention
* 20% delivery cases: doctor and full intervention

In `PHC.py`, there are two classes: `Delivery_with_doctor()` and `Delivery_no_doc()`. Ordinarily, these are used in the class `Delivery()`, arrivals during OPD hours will get delivery with doctor, and arrivals outside of hours will get without:

```
if 0 < (self.registration_time - N * 1440) < 480:
    Delivery_with_doctor(urgent=True)      # sets priority
else:
    Delivery_no_doc(urgent=True)
```

Hence, I think to have 50% with no doctor, we add a sample from a uniform distribution of 0 to 1, and then either side of 0.5 they will get a doctor or not, where currently it just allows `Delivery_with_doctor()`. This is based on the assumption that this scenario is just referring to delivery cases during OPD hours, when a doctor could have otherwise intervened. I set this up with a `doctor_delivery_scenario` parameter in `main()` and then changes to `Delivery()`.

```
# If True for scenario where reduce doctor intervention...
if doctor_delivery_scenario:
    # Sample intervention probability (between 0 and 1)
    int_prob = sim.Uniform(0, 1)
    # Assign 50% to receive doctor, and 50% to not
    if int_prob >= 0.5:
        Delivery_with_doctor(urgent=True)
    else:
        Delivery_no_doc(urgent=True)
# If scenario not in place (i.e. base case, normal function),
# then just assign all to receive doctor...
else:
    Delivery_with_doctor(urgent=True)
```

Whilst doing this, changed comments by inputs to `main()` into a doc string for clarity as I am often adjusting these.

For the cases where a doctor is provided, look to then have 60% receive partial intervention and 40% receive full intervention. In `Delivery_with_doctor()`, doctor time is sample twice (depending on whether or not the model is in the warm-up period or not). Both as: `doc_time = round(sim.Uniform(30, 60, 'minutes').sample(),2)`. This contributes to doctor utilisation as follows:

* `Patient.doc_service_time.append(doc_time)`
* `doc_tot_time = sum(Patient.doc_service_time)`
* `z = doc_tot_time/(420*days*doc_cap)`
* `doc_occupancy.append(z)` - and then `doc_occupancy` is used to calculate utilisation in the replication results spreadsheet

As such, I introduced a probability of receiving shorter or longer times around this Uniform sampling. I assumed 1/3 normal intervention to mean that the sampled time is simply divided by three.

```
# If we are in a scenario where we are reducing the time spent
# by doctors during delivery to one third of normal time, for 60%
# of delivery patients...
if doctor_delivery_scenario:
    # Sample to get probability of short intervention
    short_int_prop = sim.Uniform(0, 1)
    if short_int_prop >= 0.4:
        doc_time = doc_time / 3
```

However, this came back wrong, with very little change in utilisation:

```{python}
import pandas as pd

pd.read_csv('intext3_wrong.csv')
```

::: {.callout-tip}
## Reflections

As before, time spent working out how to implement scenarios from the article
:::

## 10.41-11.16, 11.28-11.47: Problem-solving in-text result 3

Noticed I hadn't add `global doctor_delivery_scenario` to `Delivery_with_doctor`, and that I hadn't add the scenario to the warm-up section either. However, that seemed to have no impact -

```{python}
import pandas as pd

pd.read_csv('intext3_wrong2.csv')
```

I tried running it with print statements after the 50% chance of doctor assignment, which confirmed that patients were being split between getting a doctor and not. I also ran with print statement around shortening of doctor time, which likewise confirmed that around 60% were having their times shortened.

I looked across all the outputs and could spot only minor differences between the normal and reduced delivery results.

I then tried setting the implementation up in a different way - instead of assigning people to the `Delivery_no_doc()` class, setting the intervention time to 0 in the `Delivery_with_doctor()` class. However, this made no difference:

```{python}
pd.read_csv('intext3_wrong3.csv')
```

On reflection, I wondered if perhaps I had misinterpreted this scenario - and that actually, this scenario was on top of the change in admin, and that the language was ambiguous (that actually, it could be describing doing this seperately or in addition). This then resolved the issue, with results matching up to the paper. Hence, feel it is successfully reproduced at 11.47.

::: {.callout-tip}
## Reflections

Potential misinterpretation of scenarios from a text description which can be ambiguous.
:::

```{python}
# Minutes used prior to this item
used_to_date = 1274

# Times from today
times = [
    ('9.37', '10.32'),
    ('10.41', '11.16'),
    ('11.28', '11.47')
]

calculate_times(used_to_date, times)
```

## 11.55-12.03, 12.06-12.11: Reproducing in-text result 4

It is again unclear whether the intervention in this case - adding a doctor - is in addition to or seperate to the prior interventions. As such, I will try running both options (just on top of base case, or in addition to admin and delivery changes).

Either result matches up with the description, so present both as possible answers, but consder to be succesfully reproduced at 12.11

```{python}
# Minutes used prior to this item
used_to_date = 1383

# Times from today
times = [
    ('11.55', '12.03'),
    ('12.06', '12.11')
]

calculate_times(used_to_date, times)
```

## Times below: Start on in-text result 5 (and amend result 3's table)

Times:

* 12.14-12.18
* 12.21-12.37
* 12.41-12.56
* 13.38-13.53
* 15.10-15.23

Re-ran with less delivery as an option alone for in-text result 3 (as this was missing from the table but would provide helpful context). Whilst that ran, started on in-text result 5.

This result appears to build on configuration 1 but with:

* High demand conditions (2 inpatient and childbirth cases per day - as in Figure 3A-D with (2/2/2))
* Varying the number of inpatient beds (6 to 4)

However, changing the bed number with `inpatient_bed_n` had no impact on results, with utilisation at 18% for 4 and 6 beds.

This was based on `ipd bed occ` - although I noticed that `ipd occ` had results of 0.196 and then 0.295, which - if that is referring to utilisation - is much closer to the paper result of 33%. I explored how each of these were calculated:

`ipd bed occ`:

* This was what I used for inpatient bed utilisation in Table 6 and Figure 3C
* `ipd bed occ` is equal to `bed_util`
* `bed_util` is based on `bed_time` - `bed_util.append(bed_time/(days*1440*6))`
* `bed_time` is used in `Delivery_no_doc()`, `Delivery_with_doctor()`, `IPD_no_doc()`, and `IPD_with_doc()`. In each case, it is `bed_time += y`, where y is sampling from a distribution (e.g. `y = sim.Uniform(240, 1440, 'minutes').sample()`, `y = sim.Triangular(60, 360, 180, 'minutes').bounded_sample(0)`)

`ipd occ`:

* Created from `bed_occupancy_list`
* That is based on `bed.occupancy`: `bed_occupancy_list.append(round(bed.occupancy.mean(), 2))`
* `bed` is made from `sim.Resource("Bed", capacity=inpatient_bed_n)`. It is used in `Delivery_no_doc()`, `Delivery_with_doctor()`, `IPD_no_doc()`, and `IPD_with_doc()`
* In [Salabim](https://www.salabim.org/manual/Resource.html), a Resource occupancy is described as "occupancy (=claimed_quantity / capacity)", which fits with being related to utilisation.

Hence, both methods should be providing utilisation of the beds (since both are based on time the beds are in use over the total possible time) - yet they have differing results - **particularly** when set to 4 beds.

```{python}
pd.read_csv('intext5_wrong.csv', index_col=0)
```

`ipd occ` is based on the `bed` SimPy resource, which is what we altered to change the number of beds. Hence, it seems the bed capacity has been altered for that, but not altered somewhere for `ipd bed occ`.

I looked back at the calculation of `ipd bed occ` and noticed that bed utilisation has 6 beds hard coded into it - `bed_util.append(bed_time/(days*1440*6))`. When I amended the script to adjust the bed capacity via a parameter input to main(), I had not noticed this, and had only changed it in the simpy Resource. I amended this accordingly and re-ran. Unfortunately, this did not fix it.

```{python}
pd.read_csv('intext5_wrong2.csv', index_col=0)
```

I then searched for all occurrences of the number 6, but identified nothing further that related to the number of beds.

Struggling to identify a solution, I moved onto the next item in the scope, and plan to return to this later.

::: {.callout-tip}
## Reflections

Confusion from duplicate outputs.

Hard-coding of parameters (which can then be tricky to spot afterwards to change).
:::

## 15.24-X: Starting on in-text result 6

## Timings

```{python}
# Minutes used prior to today
used_to_date = 1262

# Times from today
times = [
    ('9.22', '9.34'),
    ('9.37', '10.32'),
    ('10.41', '11.16'),
    ('11.28', '11.47'),
    ('11.55', '12.03'),
    ('12.06', '12.11'),
    ('12.14', '12.18'),
    ('12.21', '12.37'),
    ('12.41', '12.56'),
    ('13.38', '13.53'),
    ('15.10', '15.23')
]

calculate_times(used_to_date, times)
```